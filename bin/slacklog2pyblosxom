#!/usr/bin/python
# -*- python -*-
from __future__ import print_function

from slacklog import parsers
from slacklog import formatters
from slacklog import scripts
from slacklog.scripts import u, i, main

#
#   Define and handle command line options
#
(opts, args) = main(
    description='Convert Slackware ChangeLog to PyBlosxom blog entries',
    options={
        'changelog':       {'help': 'Read input from FILE',
                            'metavar': 'FILE', 'mandatory': True},
        'encoding':        {'help': 'ChangeLog encoding [default: %default]',
                            'default': 'iso8859-1'},
        'min-date':        {'help': 'Last date to include [default: include all]',
                            'metavar': 'DATE'},
        'datadir':         {'help': 'PyBlosxom blog datadir',
                            'metavar': 'DATADIR', 'mandatory': True},
        'quiet':           {'help': 'Do not print warnings',
                            'action': 'store_true'},
        'max-entries':     {'help': 'Max number of blog entries [default: infinity]',
                            'metavar': 'NUM'},
        'slackware':       {'help': 'Slackware version [default: %default].',
                            'default': 'Slackware 13.1'},
        'entry-extension': {'help': 'PyBlosxom entry extention [default: %default]',
                            'default': 'txt'},
        'entry-encoding':  {'help': 'PyBlosxom entry encoding [default: %default]',
                            'default': 'utf-8'},
        'tags-separator':  {'help': 'PyBlosxom tags separator [default: %default]',
                            'default': ','},
        'pkg-separator':   {'help': 'Pkg description separator [default: %default]',
                            'default': ':'},
        'pyfilemtime':     {'help': 'Enable pyfilemtime compliance',
                            'action': 'store_true'},
        'overwrite':       {'help': 'Overwrite entries that exist',
                            'action': 'store_true'},
        'no-backup':       {'help': 'Make a backup before overwriting',
                            'action': 'store_true'},
    })

#
#   Apply options to parser and formatter
#
parsers.SlackLogParser.quiet = opts.quiet
parsers.SlackLogParser.min_date = parsers.SlackLogParser.parse_date(u(opts.min_date))

formatters.SlackLogPyblosxomFormatter.max_entries = i(opts.max_entries)
formatters.SlackLogPyblosxomFormatter.quiet = opts.quiet
formatters.SlackLogPyblosxomFormatter.slackware = u(opts.slackware)
formatters.SlackLogPyblosxomFormatter.datadir = u(opts.datadir)
formatters.SlackLogPyblosxomFormatter.extension = u(opts.entry_extension)
formatters.SlackLogPyblosxomFormatter.encoding = u(opts.entry_encoding)
formatters.SlackLogPyblosxomFormatter.tags_separator = u(opts.tags_separator)
formatters.SlackLogPyblosxomFormatter.pkg_separator = u(opts.pkg_separator)
formatters.SlackLogPyblosxomFormatter.overwrite = opts.overwrite
formatters.SlackLogPyblosxomFormatter.backup = not opts.no_backup
formatters.SlackLogPyblosxomFormatter.pyfilemtime = opts.pyfilemtime

#
#   Read input
#
txt = scripts.read(opts.changelog, opts.encoding)

#
#   Format output (output goes to files, no need to capture the result)
#
formatters.SlackLogPyblosxomFormatter.format(parsers.SlackLogParser.parse(txt))
